#include <iostream>
#include <mysql.h>
#include <mysqld_error.h>
#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include <string>
#include <ctime>
#include <limits>
#include <iomanip> 




using namespace std;

char HOST[] = "localhost";
char USER[] = "root";
char PASS[] = "SillyPassword";

struct Entry {
	string id;
    string name;
    string age;
    string address;
    string disease;
};

int compareEntries(const Entry &a, const Entry &b) {
    return a.name.compare(b.name);
}

void quickSort(vector<Entry> &entries, int low, int high) {
    if (low < high) {
        int pivot = low;
        int i = low;
        int j = high;

        while (i < j) {
            while (compareEntries(entries[i], entries[pivot]) <= 0 && i < high) {
                i++;
            }
            while (compareEntries(entries[j], entries[pivot]) > 0) {
                j--;
            }
            if (i < j) {
                swap(entries[i], entries[j]);
            }
        }

        swap(entries[pivot], entries[j]);

        quickSort(entries, low, j - 1);
        quickSort(entries, j + 1, high);
    }
}

void delay(int seconds) {
    clock_t start_time = clock();
    clock_t wait_time = seconds * CLOCKS_PER_SEC;

    while (clock() < start_time + wait_time) {
        // Busy-wait until the desired time has passed
    }
}
string encryptData(const string& data) 
{
    string encryptedData = data;
    for (size_t i = 0; i < data.length(); ++i) {
        encryptedData[i] = data[i] + 1;
    }
    return encryptedData;
}


string decryptData(const string& data) 
{
    string decryptedData = data;
    for (size_t i = 0; i < data.length(); ++i) {
        decryptedData[i] = data[i] - 1;
    }
    return decryptedData;
}



int main() {
	
	/*
    // Authentication code goes here
		string us = "chitrak";
		string pa = "aseri123";
		string username, password;
    	cout << "Enter username: ";
    	cin >> username;
    	cout << "Enter password: ";
    	cin >> password;
    	cout << endl;  // Add an empty line


    	if (username != us || password != pa)
    	{
        	cout << "Authentication failed. Exiting..." << endl;
       	 	return 1; // Exit the program
    	}
    	else
    	{
    		cout << "Login Successful";
    		delay(3);
		}


		*/




	
	
	
	
	
    MYSQL *obj;
	
	char ID[100];
    char Name[100];
    char Age[100];
    char Address[100];
    char Disease[100];

    bool ProgramIsOpened = true;
    int answer;

    char *consult;
    char *sentence;
    string sentence_aux;


//---------------------------------------------------------------------------
// Connection 

    if (!(obj = mysql_init(0)) || !mysql_real_connect(obj, HOST, USER, "chittu", "software", 3306, NULL, 0)) {
        cout << "ERROR: MySQL connection failed." << endl;
        if (obj) {
            cout << mysql_error(obj) << endl;
        }
        return 1;
    } else {
        cout << "LogIn Successful." << endl
             << endl;
        system("cls");
        


        while (ProgramIsOpened) {
            int choice;

            do {
                cout << "Choose an option:" << endl;
                cout << "1) Add an Entry" << endl;
                cout << "2) View Entries" << endl;
				cout << "3) Search Entries" << endl;
                cout << "4) Delete Entries" << endl;
                cout << "5) Edit Entries" << endl;
                cout << "0) Exit" << endl<<endl;
                cout << "Enter your choice: ";
                cin >> choice;

                switch (choice) 
				{
                    
                    	case 1: {
								    system("cls");
								    cout << "Add an Entry" << endl;
								
								    cout << "ID - ";
								    cin >> ID;
								
								    cout << "Name - ";
								    cin >> Name;
													
								    cout << "Age - ";
								    cin >> Age;
																
								    cout << "Address - ";
								    cin >> Address;
																	
								    cout << "Disease - ";
									cin >> Disease;
																	    
									cout << endl;
								    
								    
								    
								    
								
								    // Encrypt the user's input
								    string encryptedID = encryptData(ID);
								    string encryptedName = encryptData(Name);
								    string encryptedAge = encryptData(Age);  
								    string encryptedAddress = encryptData(Address);
								    string encryptedDisease = encryptData(Disease);  

								    
								    
								    
								
								    sentence_aux = "INSERT INTO software(ID, Name, Age, Address, Disease) VALUES ('%s', '%s', '%s', '%s', '%s')";
								    sentence = new char[sentence_aux.length() + 1];
								    strcpy(sentence, sentence_aux.c_str());
								
									size_t bufferSize = sentence_aux.length() + encryptedID.length() + encryptedName.length() + encryptedAge.length() + encryptedAddress.length() + encryptedDisease.length();
									consult = new char[bufferSize + 1]; // +1 for null-terminator
									snprintf(consult, bufferSize + 1, sentence_aux.c_str(), encryptedID.c_str(), encryptedName.c_str(), encryptedAge.c_str(), encryptedAddress.c_str(), encryptedDisease.c_str());								
								    if (mysql_ping(obj)) {
								        cout << "ERROR: Impossible to connect." << endl;
								        cout << mysql_error(obj) << endl;
								    }
								    if (mysql_query(obj, consult)) {
								        cout << "ERROR: " << mysql_error(obj) << endl;
								        rewind(stdin);
								        getchar();
								    } else {
								        cout << "Info added successfully." << endl;
								        delay(2);
								        system("cls");
								    }
								    mysql_store_result(obj);
								
								    break;
								

						}
                        
                
                    case 2: 
					{
					    const char *selectQuery = "SELECT ID, Name, Age, Address, Disease FROM software";
					    if (mysql_query(obj, selectQuery)) {
					        cout << "ERROR: " << mysql_error(obj) << endl;
					    } else {
					        MYSQL_RES *result = mysql_store_result(obj);
					
					        if (result) {
					            vector<Entry> entries;
					
					            MYSQL_ROW row;
					            while ((row = mysql_fetch_row(result))) {
					                Entry entry;
					                // Decrypt the data and store it in the entry struct
					                entry.id = decryptData(row[0]);
					                entry.name = decryptData(row[1]);
					                entry.age = decryptData(row[2]);
					                entry.address = decryptData(row[3]);
					                entry.disease = decryptData(row[4]); // Assuming Disease is a string
					                entries.push_back(entry);
					            }
					
					            // Sort the entries alphabetically by name
					            quickSort(entries, 0, entries.size() - 1);
					            system("cls");
					
					            // Display the sorted data, including the new fields
					            cout << setw(5) << "ID" << setw(15) << "Name" << setw(10) << "Age" << setw(20) << "Address" << setw(20) << "Disease" << endl<<endl;
					            for (size_t i = 0; i < entries.size(); ++i) {
					                const Entry &entry = entries[i];
					                cout << setw(5) << entry.id << setw(15) << entry.name << setw(10) << entry.age << setw(20) << entry.address << setw(20) << entry.disease << endl;
					            }
					
					            char input;
					            cout << "\nPress C to continue: ";
					            cin >> input;
					
					            if (input == 'c' || input == 'C') {
					                cout << "" << endl;
					                system("cls");
					            } else {
					                return 0; // Exit the program
					            }
					
					            mysql_free_result(result);
					        } else {
					            cout << "No data found." << endl;
					        }
					    }
					
					    break;
					}


                
                        
                    case 3:
					{
						system("cls");
					    char searchFieldChoice;
					    cout << "Search on the basis of " << endl;
		                cout << "1) ID" << endl;
		                cout << "2) Name" << endl;
						cout << "3) Age" << endl;
		                cout << "4) Address" << endl;
		                cout << "5) Disease" << endl << endl;
		                cout << "Your choice - " ;
		                cin >> searchFieldChoice;
					
					    string searchValue;
						system("cls");
					    cout << "Enter the value to search for - ";
					    cin.ignore(); // Clear any remaining newline character
					    getline(cin, searchValue); // Read the value with spaces
					
					    string columnName;
					
					    // Determine the column name based on the user's choice
					    switch (toupper(searchFieldChoice))
					    {
					    case '1':
					        columnName = "ID";
					        break;
					    case '2':
					        columnName = "Name";
					        break;
					    case '3':
					        columnName = "Age";
					        break;
					    case '4':
					        columnName = "Address";
					        break;
					    case '5':
					        columnName = "Disease";
					        break;
					    default:
					        cout << "Invalid choice. Exiting search." << endl;
					        return 0;
					    }
					
					    // Encrypt the search value
					    string encryptedSearchValue = encryptData(searchValue);
					
					    // Prepare the SQL query to search for entries by the chosen field
					    string selectQuery = "SELECT * FROM software WHERE " + columnName + " = '" + encryptedSearchValue + "'";


					
					    if (mysql_query(obj, selectQuery.c_str()))
					    {
					        cout << "ERROR: " << mysql_error(obj) << endl;
					    }
					    else
					    {
					        MYSQL_RES *result = mysql_store_result(obj);
					
					        if (result)
					        {
					            cout << "\n\nID\t\tName\t\tAge\tAddress\t\tDisease" << endl;
					            MYSQL_ROW row;
					
					            // Loop through the results and display them
					            while ((row = mysql_fetch_row(result)))
					            {
					                // Decrypt the data before displaying
					                cout << decryptData(row[0]) << "\t\t" << decryptData(row[1]) << "\t\t" << decryptData(row[2]) << "\t" << decryptData(row[3]) << "\t\t" << decryptData(row[4]) << "\t\t" << endl;
					            }
					
					            mysql_free_result(result);
					        }
					        else
					        {
					            cout << "No data found for " << decryptData(searchValue) << endl;
					        }
					    }
					
					    char input;
					    cout << "\nPress C to continue: ";
					    cin >> input;
					
					    if (input == 'c' || input == 'C')
					    {
					        cout << "" << endl;
					        system("cls");
					    }
					    else
					    {
					        return 0; // Exit the program
					    }
					    break;
					}


					
                        
                        
                        case 4:
                        {
                        	string searchName;
                        	system("cls");
							cout << "Enter the ID to Delete - ";
							
							cin.ignore(); // Clear any remaining newline character
							getline(cin, searchName); // Read the name with spaces
							
							string encrypted = encryptData(searchName);
							
							// Prepare the SQL query to search for entries by name
							string deleteQuery = "DELETE FROM software WHERE ID = '" + encrypted + "'" ;
							
							if (mysql_query(obj, deleteQuery.c_str()))
							{
							    cout << "ERROR: " << mysql_error(obj) << endl;
							}
							else
							{
							    if (mysql_affected_rows(obj) > 0)
							    {	cout << endl << endl;
							        cout << "Entry Deleted Successfully! " << endl;
							    }
							    else
							    {	cout << endl << endl;
							        cout << "No data found for " << searchName << endl;
							    }
							}
							
							delay(2);
							system("cls");

						}
                        
                        break;
						

                        case 5:
						{
							string id;
							string edit;
							string column;
							
                        	system("cls");
							cout << "Enter the ID which you want to edit - ";
							cin.ignore(); // Clear any remaining newline character
							getline(cin, id); // Read the name with spaces
							
							cout << "\nEnter the field which you want to edit\n";
			                cout << "1) Name" << endl;
							cout << "2) Age" << endl;
			                cout << "3) Address" << endl;
			                cout << "4) Disease" << endl << endl;
			                cout << "Your choice - " ;
			                cin >> column;
			                
			                switch (toupper(column[0]))
						    {
						    case '1':
						        column = "Name";
						        break;
						    case '2':
						        column = "Age";
						        break;
						    case '3':
						        column = "Address";
						        break;
						    case '4':
						        column = "Disease";
						        break;
						    default:
						        cout << "Invalid choice. Exiting search." << endl;
						        return 0;
						    }	
							
							cout << "Enter the new Value - ";
							cin >> edit;							
							
							string encryptedid = encryptData(id);
							string newencrypted = encryptData(edit);
							
							
							
							
					
							// Prepare the SQL query to edit entries
							string deleteQuery = "UPDATE software SET " + column + " = '" + newencrypted + "' WHERE ID = '" + encryptedid + "' ;" ;
							
							if (mysql_query(obj, deleteQuery.c_str()))
							{
							    cout << "ERROR: " << mysql_error(obj) << endl;
							}
							else
							{
							    if (mysql_affected_rows(obj) > 0)
							    {	cout << endl << endl;
							        cout << "Entry Edited Successfully! " << endl;
							    }
							    else
							    {	cout << endl << endl;
							        cout << "No data found for " << edit << endl;
							    }
							}
							
							delay(2);
							system("cls");

						}
						
                        break;
                        
                        
                        
                    	case 0:
                        cout << "Exiting the program. Goodbye!" << endl;
                        break;
                        
                        
                        
                    	default:
                        cout << "Invalid choice. Please select a valid option." << endl;
                        break;
                }
            } while (choice != 0);

            return 0;
        }
    }

    return 0;
}
