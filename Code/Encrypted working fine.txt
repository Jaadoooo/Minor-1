// Encrypted working fine

#include <iostream>
#include <mysql.h>
#include <mysqld_error.h>
#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include <string>
#include <ctime>




using namespace std;

char HOST[] = "localhost";
char USER[] = "root";
char PASS[] = "SillyPassword";

struct Entry {
    string name;
    int age;
    string address;
};

int compareEntries(const Entry &a, const Entry &b) {
    return a.name.compare(b.name);
}

void quickSort(vector<Entry> &entries, int low, int high) {
    if (low < high) {
        int pivot = low;
        int i = low;
        int j = high;

        while (i < j) {
            while (compareEntries(entries[i], entries[pivot]) <= 0 && i < high) {
                i++;
            }
            while (compareEntries(entries[j], entries[pivot]) > 0) {
                j--;
            }
            if (i < j) {
                swap(entries[i], entries[j]);
            }
        }

        swap(entries[pivot], entries[j]);

        quickSort(entries, low, j - 1);
        quickSort(entries, j + 1, high);
    }
}

void delay(int seconds) {
    clock_t start_time = clock();
    clock_t wait_time = seconds * CLOCKS_PER_SEC;

    while (clock() < start_time + wait_time) {
        // Busy-wait until the desired time has passed
    }
}
string encryptData(const string& data) 
{
    string encryptedData = data;
    for (size_t i = 0; i < data.length(); ++i) {
        encryptedData[i] = data[i] + 1;
    }
    return encryptedData;
}

/*
string decryptData(const string& data) 
{
    string encryptedData = data;
    for (size_t i = 0; i < data.length(); ++i) {
        encryptedData[i] = data[i] - 1;
    }
    return decryptedData;
}
*/


int main() {
	
	/*
    // Authentication code goes here
		string us = "chitrak";
		string pa = "aseri123";
		string username, password;
    	cout << "Enter username: ";
    	cin >> username;
    	cout << "Enter password: ";
    	cin >> password;
    	cout << endl;  // Add an empty line


    	if (username != us || password != pa)
    	{
        	cout << "Authentication failed. Exiting..." << endl;
       	 	return 1; // Exit the program
    	}
    	else
    	{
    		cout << "Login Successful";
    		delay(3);
		}


		*/

	
    MYSQL *obj;

    char Name[30];
    int Age;
    char Address[30];

    bool ProgramIsOpened = true;
    int answer;

    char *consult;
    char *sentence;
    string sentence_aux;


//---------------------------------------------------------------------------
// Connection 

    if (!(obj = mysql_init(0)) || !mysql_real_connect(obj, HOST, USER, "chittu", "software", 3306, NULL, 0)) {
        cout << "ERROR: MySQL connection failed." << endl;
        if (obj) {
            cout << mysql_error(obj) << endl;
        }
        return 1;
    } else {
        cout << "LogIn Successful." << endl
             << endl;
        system("cls");
        


        while (ProgramIsOpened) {
            int choice;

            do {
                cout << "Choose an option:" << endl;
                cout << "1) Add an Entry" << endl;
                cout << "2) View Entries" << endl;
				cout << "3) Search Entries" << endl;
                cout << "4) Delete Entries" << endl;
                cout << "5) Edit Entries" << endl;
                cout << "0) Exit" << endl<<endl;
                cout << "Enter your choice: ";
                cin >> choice;

                switch (choice) 
				{
                    
                    	case 1: {
								    system("cls");
								    cout << "Add an Entry" << endl;
								    // Implement your code for adding an entry here
								    cout << "Name - ";
								    cin >> Name;
								
								    cout << "Age - ";
								    cin >> Age;
								    cin.ignore();
								
								    cout << "Address - ";
								    cin.ignore();
								    cin.getline(Address, 30, '\n');
								    cout << endl;
								
								    // Encrypt the user's input
								    string encryptedName = encryptData(Name);
								    int encryptedAge = Age;  // No encryption for age in this example
								    string encryptedAddress = encryptData(Address);
								
								    sentence_aux = "INSERT INTO software(Name, Age, Address) VALUES ('%s', '%d', '%s')";
								    sentence = new char[sentence_aux.length() + 1];
								    strcpy(sentence, sentence_aux.c_str());
								
								    consult = new char[strlen(sentence) + encryptedName.length() + sizeof(encryptedAge) + encryptedAddress.length()];
								    sprintf(consult, sentence, encryptedName.c_str(), encryptedAge, encryptedAddress.c_str());
								
								    if (mysql_ping(obj)) {
								        cout << "ERROR: Impossible to connect." << endl;
								        cout << mysql_error(obj) << endl;
								    }
								    if (mysql_query(obj, consult)) {
								        cout << "ERROR: " << mysql_error(obj) << endl;
								        rewind(stdin);
								        getchar();
								    } else {
								        cout << "Info added successfully." << endl;
								        delay(2);
								        system("cls");
								    }
								    mysql_store_result(obj);
								
								    break;
								

						}
                        
                
                    case 2:
                        // Implement your code for viewing entries here
                        {
                            const char *selectQuery = "SELECT Name, Age, Address FROM software";
                            if (mysql_query(obj, selectQuery)) {
                                cout << "ERROR: " << mysql_error(obj) << endl;
                            } else {
                                MYSQL_RES *result = mysql_store_result(obj);

                                if (result) {
                                    vector<Entry> entries;

                                    MYSQL_ROW row;
                                    while ((row = mysql_fetch_row(result))) {
                                        Entry entry;
                                        entry.name = row[0];
                                        entry.age = atoi(row[1]);
                                        entry.address = row[2];
                                        entries.push_back(entry);
                                    }

                                    // Sort the entries alphabetically by name
                                    quickSort(entries, 0, entries.size() - 1);
									system("cls");
									
                                    // Display the sorted data
                                    cout << "Name\t\tAge\tAddress" << endl;
                                    for (size_t i = 0; i < entries.size(); ++i) {
									    const Entry &entry = entries[i];
									    cout << entry.name << "\t\t" << entry.age << "\t" << entry.address << endl;
									    
									    

									    
									}
									
									char input;
										cout << "\n\nPress C to continue: ";
										cin >> input;
										
										if (input == 'c' || input == 'C') {
										    cout << "" << endl;
										    system("cls");
										} else {
										    return 0; // Exit the program
										}


                                    mysql_free_result(result);
                                } else {
                                    cout << "No data found." << endl;
                                }
                            }
                        }

                        break;
                
                        
                    case 3:
                        
						{
						    string searchName;
						    cout << "Enter the name to search for: ";
						    cin.ignore(); // Clear any remaining newline character
						    getline(cin, searchName); // Read the name with spaces
						
						    // Prepare the SQL query to search for entries by name
						    string selectQuery = "SELECT Name, Age, Address FROM software WHERE Name = '" + searchName + "'";
						    
						    if (mysql_query(obj, selectQuery.c_str())) 
							{
						        cout << "ERROR: " << mysql_error(obj) << endl;
						    } 
							else 
							{
						        MYSQL_RES *result = mysql_store_result(obj);
						
						        if (result) 
								{
						            cout << "Name\t\tAge\tAddress" << endl;
						            MYSQL_ROW row;
						
						            // Loop through the results and display them
						            while ((row = mysql_fetch_row(result))) 
									{
						                cout << row[0] << "\t\t" << row[1] << "\t" << row[2] << endl;
						            }
						
						            mysql_free_result(result);
						        } 
								else 
								{
						            cout << "No data found for " << searchName << endl;
						        }
						    }
						
						    char input;
						    cout << "\nPress C to continue: ";
						    cin >> input;
						
						    if (input == 'c' || input == 'C') 
							{
						        cout << "" << endl;
						        system("cls");
						    } 
							else 
							{
						        return 0; // Exit the program
						    }
						    break;
						}

					
                        
                        
                        case 4:
                        {
                        	string searchName;
                        	system("cls");
							cout << "Enter the name to Delete - ";
							
							cin.ignore(); // Clear any remaining newline character
							getline(cin, searchName); // Read the name with spaces
							
							// Prepare the SQL query to search for entries by name
							string deleteQuery = "DELETE FROM software WHERE Name = '" + searchName + "'" ;
							
							if (mysql_query(obj, deleteQuery.c_str()))
							{
							    cout << "ERROR: " << mysql_error(obj) << endl;
							}
							else
							{
							    if (mysql_affected_rows(obj) > 0)
							    {	cout << endl << endl;
							        cout << "Entry Deleted Successfully! " << endl;
							    }
							    else
							    {	cout << endl << endl;
							        cout << "No data found for " << searchName << endl;
							    }
							}
							
							delay(2);
							system("cls");

						}
                        
                        break;
						

                        case 5:
                        cout << "Exiting the program. Goodbye!" << endl;
                        break;
                        
                        
                        
                    	case 0:
                        cout << "Exiting the program. Goodbye!" << endl;
                        break;
                        
                        
                        
                    	default:
                        cout << "Invalid choice. Please select a valid option." << endl;
                        break;
                }
            } while (choice != 0);

            return 0;
        }
    }

    return 0;
}
